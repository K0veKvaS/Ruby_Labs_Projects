
puts "hello world\n"
puts "who are u?\n"

user_name=ENV['USER']
puts "Greetings, #{user_name}. Whats your favourite program language?"
fav_lang=gets.chomp

if fav_lang=="ruby"
 puts "nice. try to write smth using that."
else puts"wrong answer, fellow. lucky you, not the last one.Try to write smth using that."
end

puts "Введите команду на языке Ruby:"
ruby_command = gets.chomp

puts "Введите команду операционной системы:"
os_command = gets.chomp

begin
  eval(ruby_command)
rescue StandardError => e
  puts "Ошибка при выполнении команды Ruby: #{e.message}"
end

begin
  system(os_command)
rescue StandardError => e
  puts "Ошибка при выполнении команды ОС: #{e.message}\n"
end

puts "теперь напишите число классное математическое: " #целое положительное хотя бы двухзначное
written_number = gets.chomp.to_i

#функция нахождения количество делителей делящихся на 3
def findDividers(written_number)
    count = 0
    i = 1  
    while i <= written_number
      if (i % 3 != 0 && written_number % i == 0)
        count += 1
      end
      i+=1
    end
     count
end


# найти минимальную нечетную цифру числа
def findMinnechet(written_number)
        min=10000
    while written_number!=0
        check=written_number % 10
        if check<min && check%2!=0 
        min=check
        end 
    written_number/=10
    end
    min
end

#взаимно простые
def checkproste(written_number)
    number=written_number

    array=[]
    while written_number!=0
    digit=written_number%10
    array.push(digit)
    written_number/=10
    end

    sum_digits = 0
    for i in 0...(array.length)
    sum_digits += array[i]
    end

    multiply_Digits = 1
    for i in 0...(array.length)
    multiply_Digits *= array[i]
    end

    dividers_array = []
    for i in 1..number
    if number % i == 0
        dividers_array.push(i)
    end
    end

    # Отбираем взаимно простые делители
    co_simple_dividers_array = []
    for i in 0...(dividers_array.length)
    d = dividers_array[i]

    a = d
    b = sum_digits
    while b != 0
        swap = b
        b = a % b
        a = swap
    end
    nod_sum = a

    a = d
    b = multiply_Digits
    while b != 0
        swap = b
        b = a % b
        a = swap
    end
    nod_multiply = a

    if nod_sum == 1 && nod_multiply != 1
        co_simple_dividers_array.push(d)
    end
    end

    final_sum = 0
    for i in 0...(co_simple_dividers_array.length)
    final_sum += co_simple_dividers_array[i]
    end

    final_sum
end

#найти минимальный элемент, максимальный и первый положительный
def findMin(array)
    min=array[0]
    for i in 0...array.length do
        if array[i]<min
            min=array[i]
        end
    end
    min
end

def findmax(array)
    max=array[0]
    for i in 0...array.length do
        if array[i]>max
            max=array[i]
        end
    end
    max
end

def firstpositive(array)
    for i in 0...array.length do
        if array[i]>0 then 
            return array[i]
        end
    end 
end


def method_chooser(method_number, array_digits)
    case method_number
    when 1
      findMin(array_digits)
    when 2
      findmax(array_digits)
    when 3
        firstpositive(array_digits)
    else
      puts "ошибка. Выберите от 1 до 3."
      nil
    end
  end

  def readFile(file_path)
    if File.exist?(file_path)
      File.read(file_path).split(',').map(&:to_i)
    else
      puts "Файл не найден: #{file_path}"
      nil
    end
  rescue StandardError => e
    puts "Произошла ошибка: #{e.message}"
    nil
  end


answer1=findDividers(written_number)
answer2=findMinnechet(written_number)
answer3=checkproste(written_number)
array=[1,2,3,4,5,6,7,8,9,10]
answer4=findMin(array)
answer5=findmax(array)
answer6=firstpositive(array)

puts "находим делители числа делящихся на 3: #{answer1}\n"
puts "минимальная нечетная цифар числа: #{answer2}\n"
puts "Сумма делителей числа взаимно простых с суммой его цифр и не взаимно простых с произведением его цифр: #{answer3}\n"
puts "минимальный элемент массива: #{answer4}\n"
puts "максимальный элемент массива: #{answer5}\n"
puts "первый положительный элемент массива: #{answer6}\n"

puts "выберите метод для преобразования массива(от 1 до 3):"
methodChooser = gets.chomp.to_i

puts "теперь запишите путь файла, откуда будет считываться массив: "
filePath = gets.chomp

array_digits = readFile(filePath)
if array_digits
    result = method_chooser(methodChooser, array_digits)
    puts "Результат: #{result.inspect}" if result
  end
